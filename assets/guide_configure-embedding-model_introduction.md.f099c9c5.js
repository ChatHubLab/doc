import{_ as e,o as a,c as t,Q as i}from"./chunks/framework.8f599c84.js";const f=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"guide/configure-embedding-model/introduction.md","filePath":"guide/configure-embedding-model/introduction.md","lastUpdated":1699357179000}'),o={name:"guide/configure-embedding-model/introduction.md"},n=i('<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>嵌入模型(Embeddings) 可以将文本转换为向量，从而实现文本的语义表示。</p><p>ChatLuna 使用嵌入模型来将用户的输入，模型的输出等数据转换为向量。</p><p>目前，ChatLuna 通过 嵌入模型 和 <a href="./../configure-vector-database/introduction.html">向量数据库</a> 为用户提供 <a href="./guide/session-related/long-term-memory.html">长期记忆</a> 功能。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在未来，我们可能还会基于嵌入模型和长期记忆库，实现基于资料的 QA 问答。</p></div><p>嵌入模型的服务由多个插件提供，这其中某些模型适配器已经提供了相关服务，如 <a href="./openai-embeddings.html">OpenAI</a>。</p><p>因此，你可以直接使用这些插件来使用嵌入模型服务而无需安装嵌入模型服务插件。</p><p>如果你不想使用模型适配器自带的嵌入模型服务，你也可以使用 ChatLuna 提供的嵌入模型服务插件。</p><p>这里面提供了一些嵌入模型的适配器，你可以根据自己的需求选择合适的模型。</p><p>下面我们将介绍如何安装嵌入模型服务插件。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>前往 Koishi 的插件市场，搜索 <code>chatluna-embeddings-service</code>，并安装。</p><p>此插件还需要配置后才能使用，你可以在左侧的导航栏中选择你感兴趣的嵌入模型平台，然后按照其介绍进行配置。</p><h2 id="支持的模型" tabindex="-1">支持的模型 <a class="header-anchor" href="#支持的模型" aria-label="Permalink to &quot;支持的模型&quot;">​</a></h2><p>我们目前支持以下提供了嵌入模型的平台：</p><ul><li><p><a href="./openai-embeddings.html">OpenAI</a></p></li><li><p><a href="./hugging-face-embeddings.html">Hugging Face</a></p></li></ul><p>你可以点击上面的链接查看如何配置相应的嵌入模型。</p><h2 id="使用嵌入模型" tabindex="-1">使用嵌入模型 <a class="header-anchor" href="#使用嵌入模型" aria-label="Permalink to &quot;使用嵌入模型&quot;">​</a></h2><p>当你接入一个嵌入模型后，你需要将它设置为默认的嵌入模型。</p><p>你可以在本体的配置项中 <a href="./../useful-configurations.html#模型选项">选择</a> 默认使用的嵌入模型。</p><p>也可使用指令设置默认嵌入模型，详见 <a href="./../useful-commands.html#嵌入模型和向量数据库管理">嵌入模型和向量数据库管理</a>。</p>',21),d=[n];function r(p,l,c,s,h,u){return a(),t("div",null,d)}const _=e(o,[["render",r]]);export{f as __pageData,_ as default};
